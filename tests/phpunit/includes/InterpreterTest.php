<?php

namespace Foxway;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-28 at 05:28:38.
 */
class InterpreterTest extends \PHPUnit_Framework_TestCase {

	public function testRun_echo_apostrophe_1() {
		$this->assertEquals(
				Interpreter::run('echo "Hello!";'),
				array('Hello!')
				);
	}
	public function testRun_echo_apostrophe_2() {
		$this->assertEquals(
				Interpreter::run('echo ("Hello!");'),
				array('Hello!')
				);
	}

	public function testRun_echo_quotes_1() {
		$this->assertEquals(
				Interpreter::run("echo 'Hello!';"),
				array('Hello!')
				);
	}
	public function testRun_echo_quotes_2() {
		$this->assertEquals(
				Interpreter::run("echo ('Hello!');"),
				array('Hello!')
				);
	}

	public function testRun_echo_union_1() {
		$this->assertEquals(
				Interpreter::run('echo "String" . "Union";'),
				array('StringUnion')
				);
	}
	public function testRun_echo_union_2() {
		$this->assertEquals(
				Interpreter::run('echo \'This \' . \'string \' . \'was \' . \'made \' . \'with concatenation.\' . "\n";'),
				array("This string was made with concatenation.\n")
				);
	}
	public function testRun_echo_union_3() {
		$this->assertEquals(
				Interpreter::run('echo ("String" . "Union");'),
				array('StringUnion')
				);
	}

	public function testRun_echo_parameters_1() {
		$this->assertEquals(
				Interpreter::run('echo "Parameter1","Parameter2" , "Parameter3";'),
				array('Parameter1', 'Parameter2', 'Parameter3')
				);
	}
	public function testRun_echo_parameters_2() {
		$this->assertEquals(
				Interpreter::run('echo \'This \', \'string \', \'was \', \'made \', \'with multiple parameters.\';'),
				array('This ', 'string ', 'was ', 'made ', 'with multiple parameters.')
				);
	}

	public function testRun_echo_multiline_1() {
		$this->assertEquals(
				Interpreter::run('echo "This spans
multiple lines. The newlines will be
output as well";'),
				array("This spans\nmultiple lines. The newlines will be\noutput as well")
				);
	}
	public function testRun_echo_multiline_2() {
		$this->assertEquals(
				Interpreter::run('echo "Again: This spans\nmultiple lines. The newlines will be\noutput as well.";'),
				array("Again: This spans\nmultiple lines. The newlines will be\noutput as well.")
				);
	}

	public function testRun_echo_variables_1() {
		$this->assertEquals(
				Interpreter::run('
$foo = "foobar";
$bar = "barbaz";
echo "foo is $foo"; // foo is foobar'),
				array('foo is foobar')
				);
	}
	public function testRun_echo_variables_2() {
		$this->assertEquals(
				Interpreter::run('echo "foo is {$foo}";'),
				array('foo is foobar')
				);
	}
	public function testRun_echo_variables_3() {
		$this->assertEquals(
				Interpreter::run('echo "foo is {$foo}.";'),
				array('foo is foobar.')
				);
	}
	public function testRun_echo_variables_4() {
		$this->assertEquals(
				Interpreter::run('echo "foo is $foo\n\n";'),
				array("foo is foobar\n\n")
				);
	}
	public function testRun_echo_variables_5() {
		$this->assertEquals(
				Interpreter::run('echo \'foo is $foo\';'),
				array('foo is $foo')
				);
	}
	public function testRun_echo_variables_6() {
		$this->assertEquals(
				Interpreter::run('echo $foo,$bar;'),
				array('foobar', 'barbaz')
				);
	}
	public function testRun_echo_variables_7() {
		$this->assertEquals(
				Interpreter::run('echo "$foo$bar";'),
				array('foobarbarbaz')
				);
	}
	public function testRun_echo_variables_8() {
		$this->assertEquals(
				Interpreter::run('echo "s{$foo}l{$bar}e";'),
				array('sfoobarlbarbaze')
				);
	}
	public function testRun_echo_variables_9() {
		$this->assertEquals(
				Interpreter::run('echo "s{$foo}l$bar";'),
				array('sfoobarlbarbaz')
				);
	}
	public function testRun_echo_variables_10() {
		$this->assertEquals(
				Interpreter::run('echo "start" . $foo . "end";'),
				array('startfoobarend')
				);
	}
	public function testRun_echo_variables_11() {
		$this->assertEquals(
				Interpreter::run('echo "This ", \'string \', "was $foo ", \'with multiple parameters.\';'),
				array('This ', 'string ', 'was foobar ', 'with multiple parameters.')
				);
	}

	public function testRun_echo_escaping_1() {
		$this->assertEquals(
				Interpreter::run('echo \'s\\\\\\\'e\';'),	// echo 's\\\'e';
				array('s\\\'e')								// s\'e
				);
	}
	public function testRun_echo_escaping_2() {
		$this->assertEquals(
				Interpreter::run('echo "s\\\\\\"e";'),	// echo "s\\\"e";
				array('s\\"e')							// s\"e
				);
	}
	public function testRun_echo_escaping_3() {
		$this->assertEquals(
				Interpreter::run('echo "\\\\\\\\\\\\n";'),	// echo "\\\\\\n";
				array('\\\\\\n')							// \\\n
				);
	}
	public function testRun_echo_escaping_4() {
		$this->assertEquals(
				Interpreter::run('echo "\\\\\\\\\\\\\\n";'),	// echo "\\\\\\\n";
				array("\\\\\\\n")							// \\\<new line>
				);
	}

	public function testRun_echo_digit() {
		$this->assertEquals(
				Interpreter::run('echo 5;'),
				array('5')
				);
	}

	public function testRun_echo_math_1() {
		$this->assertEquals(
				Interpreter::run('echo \'5 + 5 * 10 = \', 5 + 5 * 10;'),
				array('5 + 5 * 10 = ', '55')
				);
	}
	public function testRun_echo_math_2() {
		$this->assertEquals(
				Interpreter::run('echo -5 + 5 + 10 + 20 - 50 - 5;'),
				array('-25')
				);
	}
	public function testRun_echo_math_3() {
		$this->assertEquals(
				Interpreter::run('echo 5 + 5 / 10 + 50/100;'),
				array('6')
				);
	}
	public function testRun_echo_math_4() {
		$this->assertEquals(
				Interpreter::run('echo 10 * 10 + "20" * \'20\' - 30 * 30 + 40 / 9;'),
				array('-395.55555555556')
				);
	}
	public function testRun_echo_math_5() {
		$this->assertEquals(
				Interpreter::run('$foo = 5; echo 2 + "$foo$foo" * 10;'),
				array('552')
				);
	}
	public function testRun_echo_math_6() {
		$this->assertEquals(
				Interpreter::run('$foo = 5; echo 2 + "$foo{$foo}0" * 10;'),
				array('5502')
				);
	}

	public function testRun_echo_math_params() {
		$this->assertEquals(
				Interpreter::run('echo \'10 + 5 * 5 = \', 10 + 5 * 5, "\n\n";'),
				array('10 + 5 * 5 = ', '35', "\n\n")
				);
	}

	public function testRun_echo_math_variables() {
		$this->assertEquals(
				Interpreter::run('
$foo = 100;
$bar = \'5\';
echo "\$foo * \$bar = $foo * $bar = ", $foo * $bar, "\n\n";'),
				array('$foo * $bar = 100 * 5 = ', '500', "\n\n")
				);
		$this->assertEquals(
				Interpreter::run('echo "\$foo / \$bar = $foo / $bar = ", $foo / $bar, "\n\n";'),
				array('$foo / $bar = 100 / 5 = ', '20', "\n\n")
				);
		$this->assertEquals(
				Interpreter::run('echo "-\$foo / -\$bar = {-$foo} / {-$bar} = ", -$foo / -$bar, "\n\n";'),
				array('-$foo / -$bar = {-100} / {-5} = ', '20', "\n\n")
				);
	}

	public function testRun_echo_math_variables_1() {
		$this->assertEquals(
				Interpreter::run('$foo = 100; $bar=-50; echo $foo+=$bar; echo $foo;'),
				array('50', '50')
				);
	}

	public function testRun_echo_math_union_1() {
		$this->assertEquals(
				Interpreter::run('echo 10 + 5 . 5;'),
				array('155')
				);
	}
	public function testRun_echo_math_union_2() {
		$this->assertEquals(
				Interpreter::run('echo 10 + 5 . 5  * 9;'),
				array('1545')
				);
	}
	public function testRun_echo_math_union_3() {
		$this->assertEquals(
				Interpreter::run('echo 10 + 5 . 5  * 9 . 4 - 5 . 8;'),
				array('154498')
				);
	}

	public function testRun_echo_math_Modulus_1() {
		$this->assertEquals(
				Interpreter::run('echo 123 % 21;'),
				array('18')
				);
	}
	public function testRun_echo_math_Modulus_2() {
		$this->assertEquals(
				Interpreter::run('echo 123 % 21 + 74 % -5;'),
				array('22')
				);
	}
	public function testRun_echo_math_Modulus_3() {
		$this->assertEquals(
				Interpreter::run('echo 123 % 21 + 74.5 % -5 * 4 / 2 . 5 + -1;'),
				array('264')
				);
	}

	public function testRun_echo_math_BitwiseAnd_1() {
		$this->assertEquals(
				Interpreter::run('echo 123 & 21;'),
				array('17')
				);
	}
	public function testRun_echo_math_BitwiseAnd_2() {
		$this->assertEquals(
				Interpreter::run('echo 123 & 21 + 94 & 54;'),
				array('50')
				);
	}
	public function testRun_echo_math_BitwiseAnd_3() {
		$this->assertEquals(
				Interpreter::run('echo 123 & 21 + 94 & -54;'),
				array('66')
				);
	}

	public function testRun_echo_math_BitwiseOr_1() {
		$this->assertEquals(
				Interpreter::run('echo 123 | 21;'),
				array('127')
				);
	}
	public function testRun_echo_math_BitwiseOr_2() {
		$this->assertEquals(
				Interpreter::run('echo 123 | -21 / 3;'),
				array('-5')
				);
	}

	public function testRun_echo_math_BitwiseXor() {
		$this->assertEquals(
				Interpreter::run('echo -123 ^ 21;'),
				array('-112')
				);
	}

	public function testRun_echo_math_LeftShift_1() {
		$this->assertEquals(
				Interpreter::run('echo 123 << 2;'),
				array('492')
				);
	}
	public function testRun_echo_math_LeftShift_2() {
		$this->assertEquals(
				Interpreter::run('echo 123 << 2 + 4;'),
				array('7872')
				);
	}
	public function testRun_echo_math_LeftShift_3() {
		$this->assertEquals(
				Interpreter::run('echo 123 << 2 + 4 << 2;'),
				array('31488')
				);
	}
	public function testRun_echo_math_LeftShift_4() {
		$this->assertEquals(
				Interpreter::run('echo 123 << 2 + 4 << 2 * 8;'),
				array('515899392')
				);
	}

	public function testRun_echo_math_RightShift_1() {
		$this->assertEquals(
				Interpreter::run('echo 123 >> 2;'),
				array('30')
				);
	}
	public function testRun_echo_math_RightShift_2() {
		$this->assertEquals(
				Interpreter::run('echo 123 >> 2 + 3;'),
				array('3')
				);
	}
	public function testRun_echo_math_RightShift_3() {
		$this->assertEquals(
				Interpreter::run('echo -123 >> 2 + 3;'),
				array('-4')
				);
	}

	public function testRun_echo_math_Increment_1() {
		$this->assertEquals(
				Interpreter::run('$a = 10; echo $a++, $a, ++$a;'),
				array('10', '11', '12')
				);
	}
	public function testRun_echo_math_Increment_2() {
		$this->assertEquals(
				Interpreter::run('$a = 10; echo $a++ + $a + ++$a;'),
				array('33')
				);
	}
	public function testRun_echo_math_Increment_3() {
		$this->assertEquals(
				Interpreter::run('
$a = 10;
$a++;
++$a;
echo "$a, ", $a++ + -5, ", " . ++$a, ", $a.";'),
				array('12, ', '7', ', 14', ', 14.')
				);
	}
	public function testRun_echo_math_Decrement_1() {
		$this->assertEquals(
				Interpreter::run('$a = 10; echo $a--, $a, --$a;'),
				array('10', '9', '8')
				);
	}
	public function testRun_echo_math_Decrement_2() {
		$this->assertEquals(
				Interpreter::run('
$a = 10;
$a--;
--$a;
echo "$a, ", $a-- + -5, ", " . --$a, ", $a.";'),
				array('8, ', '3', ', 6', ', 6.')
				);
	}

	public function testRun_echo_parentheses_1() {
		$this->assertEquals(
				Interpreter::run('echo (2+5)*10;'),
				array('70')
				);
	}
	public function testRun_echo_parentheses_2() {
		$this->assertEquals(
				Interpreter::run('$a=5; $a += ++$a - ( 9 + 9 ) / 9; echo $a;'),
				array('10')
				);
		$this->assertEquals(
				Interpreter::run('$a=5; $a += ++$a - -( 9 + 9 ) / 9; echo $a;'),
				array('14')
				);
	}
	public function testRun_echo_parentheses_3() {
		$this->assertEquals(
				Interpreter::run('echo (5+8)/4 + (((2+1) * (3+2) + 4)/5 + 7);'),
				array('14.05')
				);
	}
	public function testRun_echo_parentheses_4() {
		$this->assertEquals(
				Interpreter::run('echo (5+8);'),
				array('13')
				);
	}
	public function testRun_echo_parentheses_5() {
		$this->assertEquals(
				Interpreter::run('echo ("hello");'),
				array('hello')
				);
	}
	public function testRun_echo_parentheses_6() {
		$this->assertEquals(
				Interpreter::run('$foo = "foo"; echo("hello $foo");'),
				array('hello foo')
				);
	}
	public function testRun_echo_parentheses_7() {
		$this->assertEquals(
				Interpreter::run('echo("hello "), $foo;'),
				array('hello ', 'foo')
				);
	}
	public function testRun_echo_parentheses_8() {
		$this->assertEquals(
				Interpreter::run('echo ($foo), (" is "), $foo;'),
				array('foo', ' is ', 'foo')
				);
	}

	public function testRun_echo_inverting_1() {
		$this->assertEquals(
				Interpreter::run('echo ~10;'),
				array('-11')
				);
	}
	public function testRun_echo_inverting_2() {
		$this->assertEquals(
				Interpreter::run('echo ~-10;'),
				array('9')
				);
	}
	public function testRun_echo_inverting_3() {
		$this->assertEquals(
				Interpreter::run('echo -~10;'),
				array('11')
				);
	}

	public function testRun_echo_type_1() {
		$this->assertEquals(
				Interpreter::run('echo (bool)10;'),
				array('1')
				);
	}
	public function testRun_echo_type_2() {
		$this->assertEquals(
				Interpreter::run('echo (bool)-10;'),
				array('1')
				);
	}
	public function testRun_echo_type_3() {
		$this->assertEquals(
				Interpreter::run('echo -(bool)10;'),
				array('-1')
				);
	}
	public function testRun_echo_type_4() {
		$this->assertEquals(
				Interpreter::run('echo (bool)0;'),
				array('')
				);
	}
	public function testRun_echo_type_5() {
		$this->assertEquals(
				Interpreter::run('echo -(int)-5.5;'),
				array('5')
				);
	}

	public function testRun_echo_compare_1() {
		$this->assertEquals(
				Interpreter::run('echo 5 == 5;'),
				array('1')
				);
	}
	public function testRun_echo_compare_2() {
		$this->assertEquals(
				Interpreter::run('echo 5 == 3+2;'),
				array('1')
				);
	}
	public function testRun_echo_compare_3() {
		$this->assertEquals(
				Interpreter::run('echo -3 + 8 == 3 + 2;'),
				array('1')
				);
	}
	public function testRun_echo_compare_4() {
		$this->assertEquals(
				Interpreter::run('echo -3 * -8 > 3 + 8;'),
				array('1')
				);
	}
	public function testRun_echo_compare_5() {
		$this->assertEquals(
				Interpreter::run('echo -3 * 8 < 3 + 8;'),
				array('1')
				);
	}
	public function testRun_echo_compare_6() {
		$this->assertEquals(
				Interpreter::run('echo 3 === (int)"3";'),
				array('1')
				);
	}
	public function testRun_echo_compare_7() {
		$this->assertEquals(
				Interpreter::run('echo 0 == "a";'),
				array('1')
				);
	}
	public function testRun_echo_compare_8() {
		$this->assertEquals(
				Interpreter::run('echo "1" == "01";'),
				array('1')
				);
	}
	public function testRun_echo_compare_9() {
		$this->assertEquals(
				Interpreter::run('echo "10" == "1e1";'),
				array('1')
				);
	}
	public function testRun_echo_compare_10() {
		$this->assertEquals(
				Interpreter::run('echo 100 == "1e2";'),
				array('1')
				);
	}
	public function testRun_echo_compare_11() {
		$this->assertEquals(
				Interpreter::run('$foo = 4; echo $foo != $foo*2;'),
				array('1')
				);
	}
	public function testRun_echo_compare_12() {
		$this->assertEquals(
				Interpreter::run('echo $foo <= $foo*2;'),
				array('1')
				);
	}
	public function testRun_echo_compare_13() {
		$this->assertEquals(
				Interpreter::run('echo $foo*4 >= $foo*2;'),
				array('1')
				);
	}
	public function testRun_echo_compare_14() {
		$this->assertEquals(
				Interpreter::run('echo 5 !== (string)5;'),
				array('1')
				);
	}

	public function testRun_echo_compare_false() {
		$this->assertEquals(
				Interpreter::run('echo ( 5 === (string)5 ) === false;'),
				array('1')
				);
	}
	public function testRun_echo_compare_true() {
		$this->assertEquals(
				Interpreter::run('echo (100 == "1e2") === true;'),
				array('1')
				);
	}
	public function testRun_echo_compare_false_true() {
		$this->assertEquals(
				Interpreter::run('echo (false === true) == false;'),
				array('1')
				);
	}
	public function testRun_echo_compare_true_true() {
		$this->assertEquals(
				Interpreter::run('echo true === true === true;'),
				array('1')
				);
	}

	public function testRun_echo_true() {
		$this->assertEquals(
				Interpreter::run('echo true;'),
				array('1')
				);
	}
	public function testRun_echo_false() {
		$this->assertEquals(
				Interpreter::run('echo false;'),
				array('')
				);
	}

	public function testRun_echo_ternary_1() {
		$this->assertEquals(
				Interpreter::run('echo true?"true":"false";'),
				array('true')
				);
	}
	public function testRun_echo_ternary_2() {
		$this->assertEquals(
				Interpreter::run('echo false?"true":"false";'),
				array('false')
				);
	}
	public function testRun_echo_ternary_3() {
		$this->assertEquals(
				Interpreter::run('echo true?"true":false?"t":"f";'),
				array('t')
				);
	}
	public function testRun_echo_ternary_4() {
		$this->assertEquals(
				Interpreter::run('echo false?"true":false?"t":"f";'),
				array('f')
				);
	}
	public function testRun_echo_ternary_5() {
		$this->assertEquals(
				Interpreter::run('echo true?true?"true":false:false?"t":"f";'),
				array('t')
				);
	}
	public function testRun_echo_ternary_6() {
		$this->assertEquals(
				Interpreter::run('echo true?true?false:false:false?"t":"f";'),
				array('f')
				);
	}
	public function testRun_echo_ternary_7() {
		$this->assertEquals(
				Interpreter::run('echo true?true?"true":false:"false";'),
				array('true')
				);
	}
	public function testRun_echo_ternary_8() {
		$this->assertEquals(
				Interpreter::run('echo false?true?false:false:"false";'),
				array('false')
				);
	}
	public function testRun_echo_ternary_9() {
		$this->assertEquals(
				Interpreter::run('echo (true?"true":"false");'),
				array('true')
				);
	}
	public function testRun_echo_ternary_10() {
		$this->assertEquals(
				Interpreter::run('echo (false?"true":"false");'),
				array('false')
				);
	}
	public function testRun_echo_ternary_11() {
		$this->assertEquals(
				Interpreter::run('echo ((true)?("tr"."ue"):("fa"."lse"));'),
				array('true')
				);
	}
	public function testRun_echo_ternary_12() {
		$this->assertEquals(
				Interpreter::run('echo ((false)?("tr"."ue"):("fa"."lse"));'),
				array('false')
				);
	}
	public function testRun_echo_ternary_variable_1() {
		$this->assertEquals(
				Interpreter::run('$foo=true; echo $foo?"true":"false";'),
				array('true')
				);
	}
	public function testRun_echo_ternary_variable_2() {
		$this->assertEquals(
				Interpreter::run('$foo=false; echo $foo?"true":"false";'),
				array('false')
				);
	}

	public function testRun_echo_if_simple_1() {
		$this->assertEquals(
				Interpreter::run('if ( true ) echo "hello";'),
				array('hello')
				);
	}
	public function testRun_echo_if_simple_2() {
		$this->assertEquals(
				Interpreter::run('if ( false ) echo "hello";'),
				array()
				);
	}
	public function testRun_echo_if_simple_3() {
		$this->assertEquals(
				Interpreter::run('
if ( 5+5 ) echo "hello";
if ( 5-5 ) echo " === FALSE === ";
if ( (5+5)/4 ) echo "world";
if ( -5+5 ) echo " === FALSE === ";
if ( ((74+4)*(4+6)+88)*4 ) echo "!!!";'),
				array('hello', 'world', '!!!')
				);
	}
	public function testRun_echo_if_simple_4() {
		$this->assertEquals(
				Interpreter::run('if ( true ) { echo "true"; } $bar = "BAR";'),
				array('true')
				);
	}
	public function testRun_echo_if_else_simple_1() {
		$this->assertEquals(
				Interpreter::run('if ( true ) echo "true"; else echo "false";'),
				array('true')
				);
	}
	public function testRun_echo_if_else_simple_2() {
		$this->assertEquals(
				Interpreter::run('if ( false ) echo "true"; else echo "false";'),
				array('false')
				);
	}
	public function testRun_echo_if_else_simple_3() {
		$this->assertEquals(
				Interpreter::run('if ( true ) echo "true"; else echo "false"; echo " always!";'),
				array('true', ' always!')
				);
	}
	public function testRun_echo_if_else_simple_4() {
		$this->assertEquals(
				Interpreter::run('if ( false ) echo "true"; else echo "false"; echo " always!";'),
				array('false', ' always!')
				);
	}
	public function testRun_echo_if_else_block_1() {
		$this->assertEquals(
				Interpreter::run('if ( true ) { echo "true"; echo "true";} else { echo "false"; echo "false"; }'),
				array('true', 'true')
				);
	}
	public function testRun_echo_if_else_block_2() {
		$this->assertEquals(
				Interpreter::run('if ( false ) { echo "true"; echo "true";} else { echo "false"; echo "false"; }'),
				array('false', 'false')
				);
	}
	public function testRun_echo_if_variable_1() {
		$this->assertEquals(
				Interpreter::run('$foo = 5; if ( $foo > 4 ) echo "true"; else echo "false";'),
				array('true')
				);
	}
	public function testRun_echo_if_variable_2() {
		$this->assertEquals(
				Interpreter::run('if( $foo*2 > 4*3 ) echo "true"; else echo "false";'),
				array('false')
				);
	}
	public function testRun_echo_if_variable_3() {
		$this->assertEquals(
				Interpreter::run('if( $foo === 5 ) echo "true"; else echo "false";'),
				array('true')
				);
	}
	public function testRun_echo_if_variable_4() {
		$this->assertEquals(
				Interpreter::run('if( $foo++ ==  5 ) echo "true"; else echo "false";'),
				array('true')
				);
	}
	public function testRun_echo_if_variable_5() {
		$this->assertEquals(
				Interpreter::run('if( ++$foo ==  7 ) echo "true"; else echo "false";'),
				array('true')
				);
	}
	public function testRun_echo_if_variable_6() {
		$this->assertEquals(
				Interpreter::run('$foo = true;$bar = false;
if ( $foo ) echo $foo;
if ( $bar ) echo $bar;
if ( $foo + $bar ) echo "\$foo + \$bar";'),
				array('1', '$foo + $bar')
				);
	}
	public function testRun_echo_if_double_1() {
		$this->assertEquals(
				Interpreter::run('if( true ) if( true ) echo "true"; else echo "false";'),
				array('true')
				);
	}
	public function testRun_echo_if_double_2() {
		$this->assertEquals(
				Interpreter::run('if( true ) if( true ) {echo "true"; echo "true";} else echo "falsefalse";'),
				array('true', 'true')
				);
	}
	public function testRun_echo_if_double_3() {
		$this->assertEquals(
				Interpreter::run('if( false ) if( true ) {echo "true"; echo "true";} else echo "falsefalse";'),
				array()
				);
	}
	public function testRun_echo_if_double_4() {
		$this->assertEquals(
				Interpreter::run('if( false ) if( true ) {echo "true"; echo "true";} else echo "falsefalse"; else echo "false";'),
				array('false')
				);
	}
	public function testRun_echo_elseif_1() {
		$this->assertEquals(
				Interpreter::run('if( true ) echo "one"; elseif( true ) echo "two"; else echo "three";'),
				array('one')
				);
	}
	public function testRun_echo_elseif_2() {
		$this->assertEquals(
				Interpreter::run('if( false ) echo "one"; elseif( true ) echo "two"; else echo "three";'),
				array('two')
				);
	}
	public function testRun_echo_elseif_3() {
		$this->assertEquals(
				Interpreter::run('if( false ) echo "one"; elseif( false ) echo "two"; else echo "three";'),
				array('three')
				);
	}
	public function testRun_echo_elseif_4() {
		$this->assertEquals(
				Interpreter::run('if( true ) { echo "*"; echo "one"; } elseif( true ) { echo "*"; echo "two"; } else { echo "*"; echo "three"; }'),
				array('*', 'one')
				);
	}
	public function testRun_echo_elseif_5() {
		$this->assertEquals(
				Interpreter::run('if( false ) { echo "*"; echo "one"; } elseif( true ) { echo "*"; echo "two"; } else { echo "*"; echo "three"; }'),
				array('*', 'two')
				);
	}
	public function testRun_echo_elseif_6() {
		$this->assertEquals(
				Interpreter::run('if( false ) { echo "*"; echo "one"; } elseif( false ) { echo "*"; echo "two"; } else { echo "*"; echo "three"; }'),
				array('*', 'three')
				);
	}

	public function testRun_echo_assignment_1() {
		$this->assertEquals(
				Interpreter::run('echo $foo = 1;'),
				array('1')
				);
	}
	public function testRun_echo_assignment_2() {
		$this->assertEquals(
				Interpreter::run('echo $foo = 1 + 2;'),
				array('3')
				);
	}
	public function testRun_echo_assignment_3() {
		$this->assertEquals(
				Interpreter::run('$foo=1; echo $foo += 2;'),
				array('3')
				);
	}
	public function testRun_echo_assignment_4() {
		$this->assertEquals(
				Interpreter::run('$foo=1; echo $foo += 2 + 3;'),
				array('6')
				);
	}/*
	public function testRun_echo_assignment_5() {
		$this->assertEquals(
				Interpreter::run('echo $bar = $foo = 1, $foo, $bar;'),
				array('1', '1', '1')
				);
	}*/
	public function testRun_echo_assignment_6() {
		$this->assertEquals(
				Interpreter::run('$foo=1; $bar=2; $foo+=$bar; echo $foo,$bar;'),
				array('3', '2')
				);
	}

	public function testRun_echo_array_1() {
		$this->assertEquals(
				Interpreter::run('$foo=array( 5 ); echo $foo[0];'),
				array('5')
				);
	}
	public function testRun_echo_array_2() {
		$this->assertEquals(
				Interpreter::run('$foo=array( 5, ); echo $foo[0];'),
				array('5')
				);
	}
	public function testRun_echo_array_3() {
		$this->assertEquals(
				Interpreter::run('$foo=array( 5, 6, 7 ); echo $foo[0],$foo[1],$foo[2];'),
				array('5', '6', '7')
				);
	}
	public function testRun_echo_array_4() {
		$this->assertEquals(
				Interpreter::run('$bar="BAR"; $foo=array( 5, 6, $bar ); echo $foo[0],$foo[1],$foo[2];'),
				array('5', '6', 'BAR')
				);
	}
	public function testRun_echo_array_5() {
		$this->assertEquals(
				Interpreter::run('$foo="FOO"; $foo=array( 5, 6, $foo ); echo $foo[0],$foo[1],$foo[2];'),
				array('5', '6', 'FOO')
				);
	}
	public function testRun_echo_array_6() {
		$this->assertEquals(
				Interpreter::run('$foo=1; $foo=array($foo++,$foo,++$foo); echo $foo[0],$foo[1],$foo[2];'),
				array('1', '2', '3')
				);
	}
	public function testRun_echo_array_7() {
		$this->assertEquals(
				Interpreter::run('$foo=array(); $foo[5]=5; $foo[6]=6; $foo[7]=7; echo $foo[5],$foo[6],$foo[7];'),
				array('5', '6', '7')
				);
	}
	public function testRun_echo_array_8() {
		$this->assertEquals(
				Interpreter::run('$foo=array(); $foo[]=5; $foo[]=6; $foo[]=7; echo $foo[0],$foo[1],$foo[2];'),
				array('5', '6', '7')
				);
	}
	public function testRun_echo_array_9() {
		$this->assertEquals(
				Interpreter::run('$foo=array(); $foo[50]=5; $foo[]=6; $foo[]=7; echo $foo[50],$foo[51],$foo[52];'),
				array('5', '6', '7')
				);
	}
	public function testRun_echo_array_10() {
		$this->assertEquals(
				Interpreter::run('$foo=(array)"this is string"; echo $foo[0];'),
				array('this is string')
				);
	}
	public function testRun_echo_array_11() {
		$this->assertEquals(
				Interpreter::run('$foo=(array)5; echo $foo[0], "*".$foo[0]."*", "*$foo[0]*", "*{$foo[0]}*";'),
				array('5', '*5*', '*5*', '*5*')
				);
	}
	public function testRun_echo_array_double_arrow_1() {
		$this->assertEquals(
				Interpreter::run('$bar="BAR"; $foo=array( $bar => $bar ); echo $foo[$bar];'),
				array('BAR')
				);
	}
	public function testRun_echo_array_double_arrow_2() {
		$this->assertEquals(
				Interpreter::run('$bar = "BAR"; $foo=array( 5 => 5, $bar => $bar, "string" => "string" ); echo "*$foo[5]*"; echo "*$foo[$bar]*"; echo "*{$foo["string"]}*";'),
				array('*5*', '*BAR*', '*string*')
				);
	}

	public function testRun_echo_empty_array_push_1() {
		$this->assertEquals(
				Interpreter::run('$foo=array(); $foo[]+=5; $foo[]-=6; $foo[].=7; echo $foo[0],$foo[1],$foo[2];'),
				array('5', '-6', '7')
				);
	}
	public function testRun_echo_empty_array_push_2() {
		$this->assertEquals(
				Interpreter::run('$foo=array(); $foo[]+="5"; $foo[]-="6"; $foo[].="7"; echo $foo[0],$foo[1],$foo[2];'),
				array('5', '-6', '7')
				);
	}
	public function testRun_echo_empty_array_push_3() {
		$this->assertEquals(
				Interpreter::run('$foo=array(); $foo[]+="v"; $foo[]-="b"; $foo[].="n"; echo $foo[0],$foo[1],$foo[2];'),
				array('0', '0', 'n')
				);
	}
	public function testRun_echo_empty_array_push_4() {
		$this->assertEquals(
				Interpreter::run('$foo=array(); $foo[]*=5; $foo[]/=6; $foo[]%=7; $foo[]&=8; echo $foo[0],$foo[1],$foo[2],$foo[3];'),
				array('0', '0', '0', '0')
				);
	}
	public function testRun_echo_empty_array_push_5() {
		$this->assertEquals(
				Interpreter::run('$foo=array(); $foo[]*="v"; $foo[]/="b"; $foo[]%="n"; $foo[]&="m"; echo $foo[0],$foo[1],$foo[2],$foo[3];'),
				array('0', '', '', '0')
				);
	}
	public function testRun_echo_empty_array_push_6() {
		$this->assertEquals(
				Interpreter::run('$foo=array(); $foo[]|=5; $foo[]^=6; $foo[]<<=7; $foo[]>>=8; echo $foo[0],$foo[1],$foo[2],$foo[3];'),
				array('5', '6', '0', '0')
				);
	}

	public function testRun_echo_array_string_1() {
		$this->assertEquals(
				Interpreter::run('$foo=array(5,6,7); echo "$foo[0]";'),
				array('5')
				);
	}
	public function testRun_echo_array_string_2() {
		$this->assertEquals(
				Interpreter::run('echo "start $foo[0]";'),
				array('start 5')
				);
	}
	public function testRun_echo_array_string_3() {
		$this->assertEquals(
				Interpreter::run('echo "start $foo[0] end";'),
				array('start 5 end')
				);
	}
	public function testRun_echo_array_string_4() {
		$this->assertEquals(
				Interpreter::run('echo "start $foo[0] middle $foo[1] end";'),
				array('start 5 middle 6 end')
				);
	}

	/**
	 * Test static variable $stat in testTemplate
	 */
	public function testRun_echo_scope_static_1() {
		// start testScope
		$this->assertEquals(
				Interpreter::run('$foo = "local foo variable from testScope";', array('testScope'), 0),
				array()
				);
		// {{testTemplate|HELLO!}}
		$this->assertEquals(
				Interpreter::run('
$foo = $argv[1];
static $stat = 0;
$bar++; $stat++;
echo $foo, $argv[0], $argc, $bar, $stat, $argv["test"];', array('testTemplate', 'HELLO!'), 1),
				array('HELLO!', 'testTemplate', 2, 1, 1, null)
				);
		// {{testTemplate|HELLO!|test="TEST!!!"}}
		$this->assertEquals(
				Interpreter::run('
$foo = $argv[1];
static $stat = 0;
$bar++; $stat++;
echo $foo, $argv[0], $argc, $bar, $stat, $argv["test"];', array('testTemplate', 'HELLO!', 'test'=>'TEST!!!'), 2),
				array('HELLO!', 'testTemplate', 3, 1, 2, 'TEST!!!')
				);
		// {{testTemplate|HELLO!}}
		$this->assertEquals(
				Interpreter::run('
$foo = $argv[1];
static $stat = 0;
$bar++; $stat++;
echo $foo, $argv[0], $argc, $bar, $stat, $argv["test"];', array('testTemplate', 'HELLO!'), 3),
				array('HELLO!', 'testTemplate', 2, 1, 3, null)
				);
		// end testScope
		$this->assertEquals(
				Interpreter::run('echo $foo;', array('testScope'), 0),
				array('local foo variable from testScope')
				);
	}

	/**
	 * Test global variable $glob
	 */
	public function testRun_echo_scope_static_2() {
		// start testScope
		$this->assertEquals(
				Interpreter::run('global $glob; $glob=1000;', array('testScope'), 0),
				array()
				);
		// {{testTemplate}}
		$this->assertEquals(
				Interpreter::run('global $glob; echo ++$glob;', array('testTemplate'), 1),
				array('1001')
				);
		// {{testTemplate}}
		$this->assertEquals(
				Interpreter::run('global $glob; echo ++$glob;', array('testTemplate'), 2),
				array('1002')
				);
		// {{testTemplateGLOBAL}}
		$this->assertEquals(
				Interpreter::run('echo ++$GLOBALS["glob"];', array('testTemplateGLOBAL'), 3),
				array('1003')
				);
		// end testScope
		$this->assertEquals(
				Interpreter::run('echo $glob;', array('testScope'), 0),
				array('1003')
				);
	}

	/**
	 * @see http://www.php.net/manual/en/function.intval.php
	 */
	public function testRun_echo_intval_1() {
		$this->assertEquals(
				Interpreter::run('echo intval(42);'),
				array('42')
				);
	}
	public function testRun_echo_intval_2() {
		$this->assertEquals(
				Interpreter::run('echo intval(4.2);'),
				array('4')
				);
	}
	public function testRun_echo_intval_3() {
		$this->assertEquals(
				Interpreter::run('echo intval("42");'),
				array('42')
				);
	}
	public function testRun_echo_intval_4() {
		$this->assertEquals(
				Interpreter::run('echo intval("+42");'),
				array('42')
				);
	}
	public function testRun_echo_intval_5() {
		$this->assertEquals(
				Interpreter::run('echo intval("-42");'),
				array('-42')
				);
	}
	public function testRun_echo_intval_6() {
		$this->assertEquals(
				Interpreter::run('echo intval(042);'),
				array('34')
				);
	}
	public function testRun_echo_intval_7() {
		$this->assertEquals(
				Interpreter::run('echo intval("042");'),
				array('42')
				);
	}
	public function testRun_echo_intval_8() {
		$this->assertEquals(
				Interpreter::run('echo intval(1e10);'),
				array('10000000000') // 1410065408 ???
				);
	}
	public function testRun_echo_intval_9() {
		$this->assertEquals(
				Interpreter::run('echo intval("1e10");'),
				array('1')
				);
	}
	public function testRun_echo_intval_10() {
		$this->assertEquals(
				Interpreter::run('echo intval(0x1A);'),
				array('26')
				);
	}
	public function testRun_echo_intval_11() {
		$this->assertEquals(
				Interpreter::run('echo intval(42000000);'),
				array('42000000')
				);
	}
	public function testRun_echo_intval_12() {
		$this->assertEquals(
				Interpreter::run('echo intval(420000000000000000000);'),
				array('0')
				);
	}
	public function testRun_echo_intval_13() {
		$this->assertEquals(
				Interpreter::run('echo intval("420000000000000000000");'),
				array('9223372036854775807') //2147483647 for 32 bit systems
				);
	}
	public function testRun_echo_intval_14() {
		$this->assertEquals(
				Interpreter::run('echo intval(42, 8);'),
				array('42')
				);
	}
	public function testRun_echo_intval_15() {
		$this->assertEquals(
				Interpreter::run('echo intval("42", 8);'),
				array('34')
				);
	}
	public function testRun_echo_intval_16() {
		$this->assertEquals(
				Interpreter::run('echo intval(array());'),
				array('0')
				);
	}
	public function testRun_echo_intval_17() {
		$this->assertEquals(
				Interpreter::run('echo intval(array("foo", "bar"));'),
				array('1')
				);
	}
	public function testRun_echo_intval_18() {
		$this->assertEquals(
				Interpreter::run('echo intval(01090);'),
				array('8')
				);
	}
	public function testRun_echo_intval_19() {
		$this->assertEquals(
				Interpreter::run('echo intval(+42);'),
				array('42')
				);
	}
	public function testRun_echo_intval_20() {
		$this->assertEquals(
				Interpreter::run('echo intval(-42);'),
				array('-42')
				);
	}
	public function testRun_echo_intval_21() {
		$this->assertEquals(
				Interpreter::run('echo intval(-042);'),
				array('-34')
				);
	}

	public function testRun_echo_boolval_1() {
		$this->assertEquals(
				Interpreter::run('echo boolval(0) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_boolval_2() {
		$this->assertEquals(
				Interpreter::run('echo boolval(42) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_boolval_3() {
		$this->assertEquals(
				Interpreter::run('echo boolval(0.0) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_boolval_4() {
		$this->assertEquals(
				Interpreter::run('echo boolval(4.2) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_boolval_5() {
		$this->assertEquals(
				Interpreter::run('echo boolval("") ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_boolval_6() {
		$this->assertEquals(
				Interpreter::run('echo boolval("string") ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_boolval_7() {
		$this->assertEquals(
				Interpreter::run('echo boolval(array(1,2)) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_boolval_8() {
		$this->assertEquals(
				Interpreter::run('echo boolval(array()) ? "true" : "false";'),
				array('false')
				);
	}
	/*  @todo
	public function testRun_echo_boolval_9() {
		$this->assertEquals(
				Interpreter::run('echo boolval([1, 2]) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_boolval_10() {
		$this->assertEquals(
				Interpreter::run('echo boolval(new stdClass) ? "true" : "false";'),
				array('true')
				);
	}*/

	public function testRun_echo_doubleval() {
		$this->assertEquals(
				Interpreter::run('echo doubleval(100000000.75);'),
				array('100000000.75')
				);
	}

	public function testRun_echo_empty_1() {
		$this->assertEquals(
				Interpreter::run('$a = 0.00; echo (empty($a)? "empty": "not empty");'),
				array('empty')
				);
	}
	public function testRun_echo_empty_2() {
		$this->assertEquals(
				Interpreter::run('$b = "0.00"; echo (empty($b)? "empty": "not empty");'),
				array('not empty')
				);
	}
	public function testRun_echo_empty_key_string_1() {
		$this->assertEquals(
				Interpreter::run('$expected_array_got_string = "somestring";
echo empty($expected_array_got_string[0]) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_empty_key_string_2() {
		$this->assertEquals(
				Interpreter::run('echo empty($expected_array_got_string["0"]) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_empty_key_string_3() {
		$this->assertEquals(
				Interpreter::run('echo empty($expected_array_got_string[0.5]) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_empty_key_string_4() { //PHP 5.4 changes how isset() behaves when passed string offsets.
		$this->assertEquals(
				Interpreter::run('echo empty($expected_array_got_string["some_key"]) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_empty_key_string_5() { //PHP 5.4 changes how isset() behaves when passed string offsets.
		$this->assertEquals(
				Interpreter::run('echo empty($expected_array_got_string["0.5"]) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_empty_key_string_6() { //PHP 5.4 changes how isset() behaves when passed string offsets.
		$this->assertEquals(
				Interpreter::run('echo empty($expected_array_got_string["0 Mostel"]) ? "true" : "false";'),
				array('true')
				);
	}

	public function testRun_echo_floatval_1() {
		$this->assertEquals(
				Interpreter::run('$var = "122.34343The"; $float_value_of_var = floatval($var); echo $float_value_of_var;'),
				array('122.34343')
				);
	}

	public function testRun_echo_gettype_1() {
		$this->assertEquals(
				Interpreter::run('echo gettype(1);'),
				array('integer')
				);
	}
	public function testRun_echo_gettype_2() {
		$this->assertEquals(
				Interpreter::run('echo gettype(1.);'),
				array('double')
				);
	}
	public function testRun_echo_gettype_3() {
		$this->assertEquals(
				Interpreter::run('echo gettype(NULL);'),
				array('NULL')
				);
	}
	public function testRun_echo_gettype_4() {
		$this->assertEquals(
				Interpreter::run('echo gettype("foo");'),
				array('string')
				);
	}
	/* @todo
	public function testRun_echo_gettype_5() {
		$this->assertEquals(
				Interpreter::run('echo gettype("new stdClass");'),
				array('object')
				);
	}*/

	public function testRun_echo_is_array_1() {
		$this->assertEquals(
				Interpreter::run('$yes = array("this", "is", "an array"); echo is_array($yes) ? "Array" : "not an Array";'),
				array('Array')
				);
	}
	public function testRun_echo_is_array_2() {
		$this->assertEquals(
				Interpreter::run('$no = "this is a string"; echo is_array($no) ? "Array" : "not an Array";'),
				array('not an Array')
				);
	}

	public function testRun_echo_is_bool_1() {
		$this->assertEquals(
				Interpreter::run('$a = false; if (is_bool($a) === true) echo "Yes, this is a boolean";'),
				array('Yes, this is a boolean')
				);
	}
	public function testRun_echo_is_bool_2() {
		$this->assertEquals(
				Interpreter::run('$b = 0; if (is_bool($b) === false) {  echo "No, this is not a boolean"; }'),
				array('No, this is not a boolean')
				);
	}

	public function testRun_echo_is_double() {
		$this->assertEquals(
				Interpreter::run('if (is_double(27.25)) { echo "is float"; } else { echo "is not float"; }'),
				array('is float')
				);
	}
	public function testRun_echo_is_float_1() {
		$this->assertEquals(
				Interpreter::run('echo is_float("abc") ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_is_float_2() {
		$this->assertEquals(
				Interpreter::run('echo is_float(23) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_is_float_3() {
		$this->assertEquals(
				Interpreter::run('echo is_float(23.5) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_is_float_4() {
		$this->assertEquals(
				Interpreter::run('echo is_float(1e7) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_is_real() {
		$this->assertEquals(
				Interpreter::run('echo is_real(true) ? "true" : "false";'),
				array('false')
				);
	}

	public function testRun_echo_is_int_1() {
		$this->assertEquals(
				Interpreter::run('echo is_int(23) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_is_int_2() {
		$this->assertEquals(
				Interpreter::run('echo is_int("23") ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_is_int_3() {
		$this->assertEquals(
				Interpreter::run('echo is_int(23.5) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_is_int_4() {
		$this->assertEquals(
				Interpreter::run('echo is_int("23.5") ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_is_int_5() {
		$this->assertEquals(
				Interpreter::run('echo is_int(null) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_is_long() {
		$this->assertEquals(
				Interpreter::run('echo is_long(true) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_is_integer() {
		$this->assertEquals(
				Interpreter::run('echo is_integer(false) ? "true" : "false";'),
				array('false')
				);
	}

	public function testRun_echo_is_null_1() {
		$this->assertEquals(
				Interpreter::run('echo is_null($inexistent) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_is_null_2() {
		$this->assertEquals(
				Interpreter::run('$foo = NULL; echo is_null($foo) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_is_null_3() {
		$this->assertEquals(
				Interpreter::run('$foo = true; echo is_null($foo) ? "true" : "false";'),
				array('false')
				);
	}

	public function testRun_echo_is_numeric_1() {
		$this->assertEquals(
				Interpreter::run('echo is_numeric("42") ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_is_numeric_2() {
		$this->assertEquals(
				Interpreter::run('echo is_numeric(1337) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_is_numeric_3() {
		$this->assertEquals(
				Interpreter::run('echo is_numeric(0x539) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_is_numeric_4() {
		$this->assertEquals(
				Interpreter::run('echo is_numeric(02471) ? "true" : "false";'),
				array('true')
				);
	}/* @todo
	public function testRun_echo_is_numeric_5() {
		$this->assertEquals(
				Interpreter::run('echo is_numeric(0b10100111001) ? "true" : "false";'),
				array('true')
				);
	}*/
	public function testRun_echo_is_numeric_6() {
		$this->assertEquals(
				Interpreter::run('echo is_numeric(1337e0) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_is_numeric_7() {
		$this->assertEquals(
				Interpreter::run('echo is_numeric("not numeric") ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_is_numeric_8() {
		$this->assertEquals(
				Interpreter::run('echo is_numeric(array()) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_is_numeric_9() {
		$this->assertEquals(
				Interpreter::run('echo is_numeric(9.1) ? "true" : "false";'),
				array('true')
				);
	}

	public function testRun_echo_is_scalar_1() {
		$this->assertEquals(
				Interpreter::run('echo is_scalar(3.1416) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_is_scalar_2() {
		$this->assertEquals(
				Interpreter::run('echo is_scalar(array("foo","bar")) ? "true" : "false";'),
				array('false')
				);
	}

	public function testRun_echo_is_string_1() {
		$this->assertEquals(
				Interpreter::run('echo is_string(false) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_is_string_2() {
		$this->assertEquals(
				Interpreter::run('echo is_string(true) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_is_string_3() {
		$this->assertEquals(
				Interpreter::run('echo is_string(null) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_is_string_4() {
		$this->assertEquals(
				Interpreter::run('echo is_string("abc") ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_is_string_5() {
		$this->assertEquals(
				Interpreter::run('echo is_string("23") ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_is_string_6() {
		$this->assertEquals(
				Interpreter::run('echo is_string(23) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_is_string_7() {
		$this->assertEquals(
				Interpreter::run('echo is_string("23.5") ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_is_string_8() {
		$this->assertEquals(
				Interpreter::run('echo is_string(23.5) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_is_string_9() {
		$this->assertEquals(
				Interpreter::run('echo is_string("") ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_is_string_10() {
		$this->assertEquals(
				Interpreter::run('echo is_string(" ") ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_is_string_11() {
		$this->assertEquals(
				Interpreter::run('echo is_string("0") ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_is_string_12() {
		$this->assertEquals(
				Interpreter::run('echo is_string(0) ? "true" : "false";'),
				array('false')
				);
	}

	public function testRun_echo_isset_1() {
		$this->assertEquals(
				Interpreter::run('$var = ""; echo isset($var) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_isset_2() {
		$this->assertEquals(
				Interpreter::run('echo isset($varForIsset) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_isset_3() {
		$this->assertEquals(
				Interpreter::run('echo isset($var, $varForIsset) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_isset_4() {
		$this->assertEquals(
				Interpreter::run('echo isset($varForIsset, $var) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_isset_5() {
		$this->assertEquals(
				Interpreter::run('$varForIsset = "test"; echo isset($varForIsset, $var) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_isset_6() {
		$this->assertEquals(
				Interpreter::run('$varForIsset = NULL; echo isset($varForIsset, $var) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_isset_array_1() {
		$this->assertEquals(
				Interpreter::run('$a = array ("test" => 1, "hello" => NULL, "pie" => array("a" => "apple"));
echo isset($a["test"]) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_isset_array_2() {
		$this->assertEquals(
				Interpreter::run('echo isset($a["foo"]) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_isset_array_3() {
		$this->assertEquals(
				Interpreter::run('echo isset($a["hello"]) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_isset_array_4() {
		$this->assertEquals(
				Interpreter::run('echo isset($a["pie"]["a"]) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_isset_array_5() {
		$this->assertEquals(
				Interpreter::run('echo isset($a["pie"]["b"]) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_isset_array_6() {
		$this->assertEquals(
				Interpreter::run('echo isset($a["pie"]["a"]["b"]) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_isset_array_7() {
		$this->assertEquals(
				Interpreter::run('echo isset($a["pie"]["b"]["a"]) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_isset_key_string_1() {
		$this->assertEquals(
				Interpreter::run('$expected_array_got_string = "somestring";
echo isset($expected_array_got_string[0]) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_isset_key_string_2() {
		$this->assertEquals(
				Interpreter::run('echo isset($expected_array_got_string["0"]) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_isset_key_string_3() {
		$this->assertEquals(
				Interpreter::run('echo isset($expected_array_got_string[0.5]) ? "true" : "false";'),
				array('true')
				);
	}
	public function testRun_echo_isset_key_string_4() { //PHP 5.4 changes how isset() behaves when passed string offsets.
		$this->assertEquals(
				Interpreter::run('echo isset($expected_array_got_string["some_key"]) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_isset_key_string_5() { //PHP 5.4 changes how isset() behaves when passed string offsets.
		$this->assertEquals(
				Interpreter::run('echo isset($expected_array_got_string["0.5"]) ? "true" : "false";'),
				array('false')
				);
	}
	public function testRun_echo_isset_key_string_6() { //PHP 5.4 changes how isset() behaves when passed string offsets.
		$this->assertEquals(
				Interpreter::run('echo isset($expected_array_got_string["0 Mostel"]) ? "true" : "false";'),
				array('false')
				);
	}

	public function testRun_print_r_1() {
		$return = Interpreter::run('$a = array ("a" => "apple", "b" => "banana", "c" => array ("x", "y", "z")); print_r ($a);');
		$this->assertInstanceOf(
				'Foxway\\ROutput',
				$return[0]
				);
		$this->assertEquals('<pre>Array
(
    [a] => apple
    [b] => banana
    [c] => Array
        (
            [0] => x
            [1] => y
            [2] => z
        )

)
</pre>
',
				(string)$return[0]
			);


	}
	public function testRun_print_r_2() {
		$this->assertEquals(
				Interpreter::run('$results = print_r ($a, true); echo $results;'),
				array('Array
(
    [a] => apple
    [b] => banana
    [c] => Array
        (
            [0] => x
            [1] => y
            [2] => z
        )

)
')
				);
	}

	public function testRun_echo_settype_1() {
		$this->assertEquals(
				Interpreter::run('$foo = "5bar"; settype($foo, "int"); echo $foo;'),
				array('5')
				);
	}
	public function testRun_echo_settype_2() {
		$this->assertEquals(
				Interpreter::run('$foo = true; settype($foo, "string"); echo $foo==="1" ? "string" : "not string";'),
				array('string')
				);
	}

	public function testRun_echo_strval_1() {
		$this->assertEquals(
				Interpreter::run('$foo = true; $bar=strval($foo); echo $bar==="1" ? "string" : "not string";'),
				array('string')
				);
	}

	public function testRun_echo_unset_1() {
		$this->assertEquals(
				Interpreter::run('$var = "string"; echo isset($var) ? "true" : "false"; unset($var); echo isset($var) ? "true" : "false";'),
				array('true', 'false')
				);
	}
	public function testRun_echo_unset_2() {
		$this->assertEquals(
				Interpreter::run('$var = array("string"); echo isset($var[0]) ? "true" : "false"; unset($var[0]); echo isset($var[0]) ? "true" : "false";'),
				array('true', 'false')
				);
	}
	public function testRun_echo_unset_3() {
		$this->assertEquals(
				Interpreter::run('$var = array("foo" => "string"); echo isset($var["foo"]) ? "true" : "false"; unset($var["foo"]); echo isset($var["foo"]) ? "true" : "false";'),
				array('true', 'false')
				);
	}

	public function testRun_var_dump_1() {
		$return = Interpreter::run('$a = array(1, 2, array("a", "b", "c")); var_dump($a);');
		$this->assertInstanceOf(
				'Foxway\\ROutput',
				$return[0]
				);
		$this->assertRegExp('/<pre>array\(3\) {
  \[0\] ?=>
  int\(1\)
  \[1\] ?=>
  int\(2\)
  \[2\] ?=>
  array\(3\) {
    \[0\] ?=>
    string\(1\) "a"
    \[1\] ?=>
    string\(1\) "b"
    \[2\] ?=>
    string\(1\) "c"
  }
}
<\/pre>
/',
				(string)$return[0]
			);
	}
	public function testRun_var_dump_2() {
		$return = Interpreter::run('$b = 3.1; $c = true; var_dump($b, $c);');
		$this->assertInstanceOf(
				'Foxway\\ROutput',
				$return[0]
				);
		$this->assertRegExp(
				'/<pre>(double|float)\(3.1\)\nbool\(true\)\n<\/pre>\n/',
				(string)$return[0]
			);
	}

	public function testRun_var_export_1() {
		$return = Interpreter::run('$a = array (1, 2, array ("a", "b", "c")); var_export($a);');
		$this->assertInstanceOf(
				'Foxway\\ROutput',
				$return[0]
				);
		$this->assertEquals("<pre>array (
  0 => 1,
  1 => 2,
  2 => "."
  array (
    0 => 'a',
    1 => 'b',
    2 => 'c',
  ),
)</pre>
",
				(string)$return[0]
			);
	}
	public function testRun_var_export_2() {
		$this->assertEquals(
				Interpreter::run('$b = 3.1; $v = var_export($b, true); echo $v;'),
				array('3.1')
				);
	}

	public function testRun_RArray_count() {
		$this->assertEquals(
				Interpreter::run('$transport = array("foot", "bike", "car", "plane"); echo count($transport);'),
				array('4')
				);
	}
	public function testRun_RArray_current() {
		$this->assertEquals(
				Interpreter::run('echo current($transport);'),
				array('foot')
				);
	}
	public function testRun_RArray_next() {
		$this->assertEquals(
				Interpreter::run('echo next($transport), next($transport);'),
				array('bike', 'car')
				);
	}
	public function testRun_RArray_end() {
		$this->assertEquals(
				Interpreter::run('echo end($transport);'),
				array('plane')
				);
	}
	public function testRun_RArray_prev() {
		$this->assertEquals(
				Interpreter::run('echo prev($transport), prev($transport);'),
				array('car', 'bike')
				);
	}
	public function testRun_RArray_each() {
		$this->assertEquals(
				Interpreter::run('$foo = each($transport); echo $foo[0], $foo[1];'),
				array('1', 'bike')
				);
	}
	public function testRun_RArray_key() {
		$this->assertEquals(
				Interpreter::run('echo key($transport);'),
				array('2')
				);
	}
	public function testRun_RArray_in_array_1() {
		$this->assertEquals(
				Interpreter::run('echo in_array("bike", $transport);'),
				array('1')
				);
	}

	public function testRun_RString_similar_text() {
		$this->assertEquals(
				Interpreter::run('$var_1 = "PHP IS GREAT"; $var_2 = "WITH MYSQL"; similar_text($var_1, $var_2, $percent); echo $percent;'),
				array('27.272727272727')
				);
	}

}

// @todo echo is_scalar(array("foo","bar") ? "true" : "false"; // most return error
